# -*- coding: utf-8 -*-
from datetime import date
from re import A

from odoo import fields, models, api, _
from odoo.tools import float_round, date_utils, convert_file, html2plaintext
from datetime import datetime


class HrPayslipInherit(models.Model):
    _inherit = "hr.payslip"

    def _get_payslip_lines(self):
        self.ensure_one()

        localdict = self.env.context.get("force_payslip_localdict", None)
        if localdict is None:
            localdict = self._get_localdict()

        rules_dict = localdict["rules"].dict
        result_rules_dict = localdict["result_rules"].dict

        blacklisted_rule_ids = self.env.context.get(
            "prevent_payslip_computation_line_ids", []
        )
        result = {}
        for rule in sorted(self.struct_id.rule_ids, key=lambda x: x.sequence):
            if rule.id in blacklisted_rule_ids:
                continue
            localdict.update(
                {
                    "result": None,
                    "result_qty": 1.0,
                    "result_rate": 100,
                    "result_name": False,
                }
            )
            if rule._satisfy_condition(localdict):
                amount, qty, rate = rule._compute_rule(localdict)
                base = rule._compute_base(localdict)
                nombre = rule._compute_nombre(localdict)
                # check if there is already a rule computed with that code
                previous_amount = rule.code in localdict and localdict[rule.code] or 0.0
                # set/overwrite the amount computed for this rule in the localdict
                tot_rule = amount * qty * rate / 100.0
                localdict[rule.code] = tot_rule
                result_rules_dict[rule.code] = {
                    "total": tot_rule,
                    "amount": amount,
                    "quantity": qty,
                }
                rules_dict[rule.code] = rule
                # sum the amount for its salary category
                localdict = rule.category_id._sum_salary_rule_category(
                    localdict, tot_rule - previous_amount
                )
                # Retrieve the line name in the employee's lang
                employee_lang = self.employee_id.sudo().address_home_id.lang
                # This actually has an impact, don't remove this line
                context = {"lang": employee_lang}
                if localdict["result_name"]:
                    rule_name = localdict["result_name"]
                elif rule.code in [
                    "BASIC",
                    "GROSS",
                    "NET",
                    "DEDUCTION",
                    "REIMBURSEMENT",
                ]:  # Generated by default_get (no xmlid)
                    if (
                        rule.code == "BASIC"
                    ):  # Note: Crappy way to code this, but _(foo) is forbidden. Make a method in master to be overridden, using the structure code
                        if rule.name == "Double Holiday Pay":
                            rule_name = _("Double Holiday Pay")
                        if rule.struct_id.name == "CP200: Employees 13th Month":
                            rule_name = _("Prorated end-of-year bonus")
                        else:
                            rule_name = _("Basic Salary")
                    elif rule.code == "GROSS":
                        rule_name = _("Gross")
                    elif rule.code == "DEDUCTION":
                        rule_name = _("Deduction")
                    elif rule.code == "REIMBURSEMENT":
                        rule_name = _("Reimbursement")
                    elif rule.code == "NET":
                        rule_name = _("Net Salary")
                else:
                    rule_name = rule.with_context(lang=employee_lang).name
                # create/overwrite the rule in the temporary results
                result[rule.code] = {
                    "sequence": rule.sequence,
                    "code": rule.code,
                    "name": rule_name,
                    "note": html2plaintext(rule.note),
                    "salary_rule_id": rule.id,
                    "contract_id": localdict["contract"].id,
                    "employee_id": localdict["employee"].id,
                    "amount": amount,
                    "quantity": qty,
                    "rate": rate,
                    "slip_id": self.id,
                    "base": base,
                    "nombre": nombre,
                }

        return result.values()
